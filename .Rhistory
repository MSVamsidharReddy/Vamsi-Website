library(dplyr)
# Load your dataset
data <- read_csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Assuming 'Sentence_Years' is the column for offense quantification
# Replace 'Sentence_Years', 'Race', and 'Gender' with the actual column names from your dataset
# Generate box plot for Race
ggplot(data, aes(x = Race, y = "Sentence (Years)", fill = Race)) +
geom_boxplot() +
labs(title = "Distribution of Sentence Lengths by Race",
x = "Race",
y = "Sentence Length (Years)") +
theme_minimal()
# Generate box plot for Gender
ggplot(data, aes(x = Gender, y = Sentence_Years, fill = Gender)) +
geom_boxplot() +
labs(title = "Distribution of Sentence Lengths by Gender",
x = "Gender",
y = "Sentence Length (Years)") +
theme_minimal()
library(ggplot2)
library(readr)
library(dplyr)
# Load your dataset
data <- read_csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Assuming 'Sentence_Years' is the column for offense quantification
# Replace 'Sentence_Years', 'Race', and 'Gender' with the actual column names from your dataset
# Generate box plot for Race
ggplot(data, aes(x = Race, y = "Sentence (Years)", fill = Race)) +
geom_boxplot() +
labs(title = "Distribution of Sentence Lengths by Race",
x = "Race",
y = "Sentence Length (Years)") +
theme_minimal()
# Generate box plot for Gender
ggplot(data, aes(x = Gender, y = "(Sentence_Years)", fill = Gender)) +
geom_boxplot() +
labs(title = "Distribution of Sentence Lengths by Gender",
x = "Gender",
y = "Sentence Length (Years)") +
theme_minimal()
# Load the necessary libraries
library(ggplot2)
# Load the data
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Parole Review Status' into a factor for plotting
data$Parole.Review.Status <- as.factor(data$Parole.Review.Status)
# Create a scatter plot
ggplot(data, aes(x=Sentence.Years, y=Parole.Review.Status)) +
geom_point(alpha=0.5) +  # Use semi-transparent points
labs(x = "Sentence Length (Years)", y = "Parole Review Status", title = "Scatter Plot of Sentence Length vs. Parole Review Status") +
theme_minimal()
# Load the necessary libraries
library(ggplot2)
# Load the data
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Parole Review Status' into a factor for plotting
data$Parole.Review.Status <- as.factor(data$"Parole Review Status")
# Load the necessary libraries
library(ggplot2)
# Load the data
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Parole Review Status' into a factor for plotting
data$"Parole Review Status" <- as.factor(data$"Parole Review Status")
# Load necessary packages
library(ggplot2)
library(dplyr)
# Boxplot of sentence lengths by race
ggplot(data, aes(x = Race, y = ⁠ Sentence..Years. ⁠, fill = Race)) +
# Load necessary packages
library(ggplot2)
library(dplyr)
# Assuming 'data' is your dataset and it's already loaded
# Boxplot of sentence lengths by race
ggplot(data, aes(x = Race, y = Sentence (Years), fill = Race)) +
geom_boxplot() +
labs(title = "Distribution of Sentence Lengths by Race", x = "Race", y = "Sentence Length (Years)") +
theme_minimal()
# Load necessary packages
library(ggplot2)
library(dplyr)
# Assuming 'data' is your dataset and it's already loaded
# Boxplot of sentence lengths by race
ggplot(data, aes(x = Race, y = Sentence (Years), fill = Race)) +
geom_boxplot() +
labs(title = "Distribution of Sentence Lengths by Race", x = "Race", y = "Sentence Length (Years)") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence (Years)' to numeric, removing non-numeric entries
data$`Sentence (Years)` <- as.numeric(as.character(data$`Sentence (Years)`))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence (Years)' to numeric, removing non-numeric entries
data$`Sentence (Years)` <- as.numeric(as.character(data$'Sentence (Years)'))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence (Years)' to numeric, removing non-numeric entries
data$`Sentence (Years)` <- as.numeric(as.character(data$'Sentence (Years)'))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence (Years)' to numeric, removing non-numeric entries
data$`Sentence (Years)` <- as.numeric(as.character(data$'Sentence (Years)'))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence (Years)' to numeric, removing non-numeric entries
data$'Sentence (Years)' <- as.numeric(as.character(data$'Sentence (Years)'))
library(ggplot2)
library(readr)
library(dplyr)
# Read in the data
data <- read_csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence Date' to Date type (change the column name accordingly)
data$`Sentence Date` <- as.Date(data$`Sentence Date`, format = "%m/%d/%Y")
# Assuming 'TDCJ Offense' is the offense type and 'Race' and 'Gender' are categories
# Group data by Sentence Date and count offenses
offense_counts <- data %>%
group_by(`Sentence Date`, Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
# Plot the data with specified y-axis limits
p <- ggplot(offense_counts, aes(x = `Sentence Date`, y = Count, group = interaction(Race, Gender))) +
geom_line(aes(color = Race)) +
facet_wrap(~Gender, scales = "free_y") +
labs(title = "Trend of Offenses Over Time by Race and Gender",
x = "Date of Sentence",
y = "Number of Offenses") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_cartesian(ylim = c(0, 100)) # Explicitly set y-axis limits
# Print the plot to see it in the R console
print(p)
# You can also save the plot if you need to keep it as a file
ggsave("zoomed_plot_0_200.png", plot = p, width = 16, height = 9, dpi = 300)
# Note: Replace "your_path/High_Value_Dataset__January_2024 (6).csv" with the actual path to your CSV file.
# Make sure the 'Sentence Date', 'Race', 'Gender', and 'TDCJ Offense' column names match exactly what's in your dataset.
library(ggplot2)
library(readr)
library(dplyr)
# Load your dataset
data <- read_csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Assuming 'Sentence_Years' is the column for offense quantification
# Replace 'Sentence_Years', 'Race', and 'Gender' with the actual column names from your dataset
# Generate box plot for Race
ggplot(data, aes(x = Race, y = "Sentence (Years)", fill = Race)) +
geom_boxplot() +
labs(title = "Distribution of Sentence Lengths by Race",
x = "Race",
y = "Sentence Length (Years)") +
theme_minimal()
# Generate box plot for Gender
ggplot(data, aes(x = Gender, y = "(Sentence_Years)", fill = Gender)) +
geom_boxplot() +
labs(title = "Distribution of Sentence Lengths by Gender",
x = "Gender",
y = "Sentence Length (Years)") +
theme_minimal()
library(ggplot2)
library(readr)
library(dplyr)
# Read in the data
data <- read_csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence Date' to Date type (change the column name accordingly)
data$`Sentence Date` <- as.Date(data$`Sentence Date`, format = "%m/%d/%Y")
# Assuming 'TDCJ Offense' is the offense type and 'Race' and 'Gender' are categories
# Group data by Sentence Date and count offenses
offense_counts <- data %>%
group_by(`Sentence Date`, Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
# Plot the data with specified y-axis limits
p <- ggplot(offense_counts, aes(x = `Sentence Date`, y = Count, group = interaction(Race, Gender))) +
geom_line(aes(color = Race)) +
facet_wrap(~Gender, scales = "free_y") +
labs(title = "Trend of Offenses Over Time by Race and Gender",
x = "Date of Sentence",
y = "Number of Offenses") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_cartesian(ylim = c(0, 100)) # Explicitly set y-axis limits
# Print the plot to see it in the R console
print(p)
# You can also save the plot if you need to keep it as a file
ggsave("zoomed_plot_0_200.png", plot = p, width = 16, height = 9, dpi = 300)
# Note: Replace "your_path/High_Value_Dataset__January_2024 (6).csv" with the actual path to your CSV file.
# Make sure the 'Sentence Date', 'Race', 'Gender', and 'TDCJ Offense' column names match exactly what's in your dataset.
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Prepare data by grouping and summarizing
offense_data <- data %>%
group_by(Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
# Assuming 'Age' is a variable in your dataset
ggplot(data, aes(x = Race, y = Age, fill = Gender)) +
geom_boxplot() +
labs(title = "Age Distribution of Offenses by Race and Gender",
x = "Race",
y = "Age") +
theme_minimal()
library(ggplot2)
library(readr)
library(dplyr)
# Read in the data
data <- read_csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence Date' to Date type (change the column name accordingly)
data$`Sentence Date` <- as.Date(data$`Sentence Date`, format = "%m/%d/%Y")
# Assuming 'TDCJ Offense' is the offense type and 'Race' and 'Gender' are categories
# Group data by Sentence Date and count offenses
offense_counts <- data %>%
group_by(`Sentence Date`, Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
# Plot the data with specified y-axis limits
p <- ggplot(offense_counts, aes(x = `Sentence Date`, y = Count, group = interaction(Race, Gender))) +
geom_line(aes(color = Race)) +
facet_wrap(~Gender, scales = "free_y") +
labs(title = "Trend of Offenses Over Time by Race and Gender",
x = "Date of Sentence",
y = "Number of Offenses") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_cartesian(ylim = c(0, 100)) # Explicitly set y-axis limits
# Print the plot to see it in the R console
print(p)
# You can also save the plot if you need to keep it as a file
ggsave("zoomed_plot_0_200.png", plot = p, width = 16, height = 9, dpi = 300)
# Note: Replace "your_path/High_Value_Dataset__January_2024 (6).csv" with the actual path to your CSV file.
# Make sure the 'Sentence Date', 'Race', 'Gender', and 'TDCJ Offense' column names match exactly what's in your dataset.
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence (Years)' to numeric, removing non-numeric entries
data$'Sentence (Years)' <- as.numeric(as.character(data$'Sentence (Years)'))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence (Years)' to numeric, removing non-numeric entries
data$'Sentence (Years)' <- as.numeric(as.character(data$'Sentence (Years)'))
library(ggplot2)
library(readr)
library(dplyr)
# Read in the data
data <- read_csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence Date' to Date type (change the column name accordingly)
data$`Sentence Date` <- as.Date(data$`Sentence Date`, format = "%m/%d/%Y")
# Assuming 'TDCJ Offense' is the offense type and 'Race' and 'Gender' are categories
# Group data by Sentence Date and count offenses
offense_counts <- data %>%
group_by(`Sentence Date`, Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
# Plot the data with specified y-axis limits
p <- ggplot(offense_counts, aes(x = `Sentence Date`, y = Count, group = interaction(Race, Gender))) +
geom_line(aes(color = Race)) +
facet_wrap(~Gender, scales = "free_y") +
labs(title = "Trend of Offenses Over Time by Race and Gender",
x = "Date of Sentence",
y = "Number of Offenses") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_cartesian(ylim = c(0, 100)) # Explicitly set y-axis limits
# Print the plot to see it in the R console
print(p)
# You can also save the plot if you need to keep it as a file
ggsave("zoomed_plot_0_200.png", plot = p, width = 16, height = 9, dpi = 300)
data <- read.csv("//Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# let's load the necessary libraries
library(ggplot2)
library(dplyr)
data <- read.csv("//Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Let's Prepare data by grouping and summarizing
offense_data <- data %>%
group_by(Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
data <- data.frame(
Sentence_Years = c(4.0, 30.0, 70.0, 30.0, 25.0, 55.0, 10.0, 60.0, 30.0, 50.0, 40.0, 40.0, 75.0, 50.0, 14.0, 50.0, 25.0, 30.0, 60.0, 50.0, 30.0, 20.0, 3.0, 25.0, 50.0, NA, 25.0, 15.0, NA, 25.0, NA),
Parole_Review_Status = c
)
data$Sentence_Years <- as.numeric(data$Sentence_Years)
# Plot
ggplot(data, aes(x = Sentence_Years, fill = Parole_Review_Status)) +
geom_density(alpha = 0.6, na.rm = TRUE) +  # na.rm = TRUE removes NA values from the plot
labs(x = "Sentence (Years)", y = "Density", title = "Distribution of Sentence Length by Parole Review Status") +
theme_minimal() +
scale_fill_manual(values = c("IN PAROLE REVIEW PROCESS" = "blue", "NOT IN REVIEW PROCESS" = "red")) +
guides(fill = guide_legend(title = "Parole Review Status"))
library(ggplot2)
library(readr)
library(dplyr)
# Read in the data
data <- read_csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence Date' to Date type (change the column name accordingly)
data$`Sentence Date` <- as.Date(data$`Sentence Date`, format = "%m/%d/%Y")
# Assuming 'TDCJ Offense' is the offense type and 'Race' and 'Gender' are categories
# Group data by Sentence Date and count offenses
offense_counts <- data %>%
group_by(`Sentence Date`, Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
# Plot the data with specified y-axis limits
p <- ggplot(offense_counts, aes(x = `Sentence Date`, y = Count, group = interaction(Race, Gender))) +
geom_line(aes(color = Race)) +
facet_wrap(~Gender, scales = "free_y") +
labs(title = "Trend of Offenses Over Time by Race and Gender",
x = "Date of Sentence",
y = "Number of Offenses") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_cartesian(ylim = c(0, 100)) # Explicitly set y-axis limits
# Print the plot to see it in the R console
print(p)
# You can also save the plot if you need to keep it as a file
ggsave("zoomed_plot_0_200.png", plot = p, width = 16, height = 9, dpi = 300)
# Note: Replace "your_path/High_Value_Dataset__January_2024 (6).csv" with the actual path to your CSV file.
# Make sure the 'Sentence Date', 'Race', 'Gender', and 'TDCJ Offense' column names match exactly what's in your dataset.
# let's load the necessary libraries
library(ggplot2)
library(dplyr)
data <- read.csv("//Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Let's Prepare data by grouping and summarizing
offense_data <- data %>%
group_by(Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
data$Sentence_Years <- as.numeric(data$Sentence_Years)
# let's load the necessary libraries
library(ggplot2)
library(dplyr)
data <- read.csv("//Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Let's Prepare data by grouping and summarizing
offense_data <- data %>%
group_by(Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
data$Sentence_Years <- as.numeric(data$Sentence_Years)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence (Years)' to numeric, removing non-numeric entries
data$'Sentence (Years)' <- as.numeric(as.character(data$'Sentence (Years)'))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Prepare data by grouping and summarizing
offense_data <- data %>%
group_by(Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
# Assuming 'Age' is a variable in your dataset
ggplot(data, aes(x = Race, y = Age, fill = Gender)) +
geom_boxplot() +
labs(title = "Age Distribution of Offenses by Race and Gender",
x = "Race",
y = "Age") +
theme_minimal()
library(ggplot2)
library(readr)
library(dplyr)
# Read in the data
data <- read_csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence Date' to Date type (change the column name accordingly)
data$`Sentence Date` <- as.Date(data$`Sentence Date`, format = "%m/%d/%Y")
# Assuming 'TDCJ Offense' is the offense type and 'Race' and 'Gender' are categories
# Group data by Sentence Date and count offenses
offense_counts <- data %>%
group_by(`Sentence Date`, Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
# Plot the data with specified y-axis limits
p <- ggplot(offense_counts, aes(x = `Sentence Date`, y = Count, group = interaction(Race, Gender))) +
geom_line(aes(color = Race)) +
facet_wrap(~Gender, scales = "free_y") +
labs(title = "Trend of Offenses Over Time by Race and Gender",
x = "Date of Sentence",
y = "Number of Offenses") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_cartesian(ylim = c(0, 100)) # Explicitly set y-axis limits
# Print the plot to see it in the R console
print(p)
# You can also save the plot if you need to keep it as a file
ggsave("zoomed_plot_0_200.png", plot = p, width = 16, height = 9, dpi = 300)
# Note: Replace "your_path/High_Value_Dataset__January_2024 (6).csv" with the actual path to your CSV file.
# Make sure the 'Sentence Date', 'Race', 'Gender', and 'TDCJ Offense' column names match exactly what's in your dataset.
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence (Years)' to numeric, removing non-numeric entries
data$'Sentence (Years)' <- as.numeric(as.character(data$'Sentence (Years)'))
# let's load the necessary libraries
library(ggplot2)
library(dplyr)
data <- read.csv("//Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Let's Prepare data by grouping and summarizing
offense_data <- data %>%
group_by(Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
data$Sentence_Years <- as.numeric(data$Sentence_Years)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence (Years)' to numeric, removing non-numeric entries
data$'Sentence (Years)' <- as.numeric(as.character(data$'Sentence (Years)'))
# let's load the necessary libraries
library(ggplot2)
library(dplyr)
data <- read.csv("//Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Let's Prepare data by grouping and summarizing
offense_data <- data %>%
group_by(Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
data$Sentence_Years <- as.numeric(data$Sentence_Years)
# let's load the necessary libraries
library(ggplot2)
library(dplyr)
data <- read.csv("//Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Let's Prepare data by grouping and summarizing
offense_data <- data %>%
group_by(Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
data$Sentence_Years <- as.numeric(data$Sentence_Years)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence (Years)' to numeric, removing non-numeric entries
data$'Sentence (Years)' <- as.numeric(as.character(data$'Sentence (Years)'))
library(ggplot2)
library(readr)
library(dplyr)
# Read in the data
data <- read_csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Convert 'Sentence Date' to Date type (change the column name accordingly)
data$`Sentence Date` <- as.Date(data$`Sentence Date`, format = "%m/%d/%Y")
# Assuming 'TDCJ Offense' is the offense type and 'Race' and 'Gender' are categories
# Group data by Sentence Date and count offenses
offense_counts <- data %>%
group_by(`Sentence Date`, Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
# Plot the data with specified y-axis limits
p <- ggplot(offense_counts, aes(x = `Sentence Date`, y = Count, group = interaction(Race, Gender))) +
geom_line(aes(color = Race)) +
facet_wrap(~Gender, scales = "free_y") +
labs(title = "Trend of Offenses Over Time by Race and Gender",
x = "Date of Sentence",
y = "Number of Offenses") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_cartesian(ylim = c(0, 100)) # Explicitly set y-axis limits
# Print the plot to see it in the R console
print(p)
# You can also save the plot if you need to keep it as a file
ggsave("zoomed_plot_0_200.png", plot = p, width = 16, height = 9, dpi = 300)
# Note: Replace "your_path/High_Value_Dataset__January_2024 (6).csv" with the actual path to your CSV file.
# Make sure the 'Sentence Date', 'Race', 'Gender', and 'TDCJ Offense' column names match exactly what's in your dataset.
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the dataset
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Prepare data by grouping and summarizing
offense_data <- data %>%
group_by(Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
# Assuming 'Age' is a variable in your dataset
ggplot(data, aes(x = Race, y = Age, fill = Gender)) +
geom_boxplot() +
labs(title = "Age Distribution of Offenses by Race and Gender",
x = "Race",
y = "Age") +
theme_minimal()
# let's load the necessary libraries
library(ggplot2)
library(dplyr)
data <- read.csv("/Users/msvamsidharreddy/Downloads/High_Value_Dataset__January_2024 (6).csv")
# Let's Prepare data by grouping and summarizing
offense_data <- data %>%
group_by(Race, Gender) %>%
summarise(Count = n(), .groups = 'drop')
data <- data.frame(
Sentence_Years = c(4.0, 30.0, 70.0, 30.0, 25.0, 55.0, 10.0, 60.0, 30.0, 50.0, 40.0, 40.0, 75.0, 50.0, 14.0, 50.0, 25.0, 30.0, 60.0, 50.0, 30.0, 20.0, 3.0, 25.0, 50.0, NA, 25.0, 15.0, NA, 25.0, NA),
Parole_Review_Status = c
)
data$Sentence_Years <- as.numeric(data$Sentence_Years)
# Plot
ggplot(data, aes(x = Sentence_Years, fill = Parole_Review_Status)) +
geom_density(alpha = 0.6, na.rm = TRUE) +  # na.rm = TRUE removes NA values from the plot
labs(x = "Sentence (Years)", y = "Density", title = "Distribution of Sentence Length by Parole Review Status") +
theme_minimal() +
scale_fill_manual(values = c("IN PAROLE REVIEW PROCESS" = "blue", "NOT IN REVIEW PROCESS" = "red")) +
guides(fill = guide_legend(title = "Parole Review Status"))
